 /*
        * 生成显示数据
        */
        genImageData: function (imgData, image, invert) {
            this.genLut(image, invert);

            var storedPixelDataIndex = 0;
            var localNumPixels = image._pixelData.length;
            var canvasImageDataIndex = 3;
            var offset = 0;
            if (image._minPixel < 0) {
                offset = image._minPixel;
            }

            while (storedPixelDataIndex < localNumPixels) {
                imgData[canvasImageDataIndex] = image._lut[image._pixelData[storedPixelDataIndex++] + (-offset)]; // alpha
                canvasImageDataIndex += 4;
            }
        },

        /*
        * 生成Lut映射表
        */
        genLut: function (image, invert) {
            var center0 = this._wndCenter;
            var width0 = this._wndWidth;

            var minPixelValue = image._minPixel;
            var maxPixelValue = image._maxPixel;

            var modalityLutValue;
            var storedValue;
            var voiLutValue;
            var clampedValue;

            var offset = 0;
            if (minPixelValue < 0) {
                offset = minPixelValue;
            }

            if (null == image._lut) {
                return;
            }

            if (invert === true) {
                for (storedValue = minPixelValue; storedValue <= maxPixelValue; ++storedValue) {
                    modalityLutValue = storedValue * image._slope + image._intercept;
                    voiLutValue = (((modalityLutValue - (center0)) / (width0) + 0.5) * 255.0);
                    clampedValue = Math.min(Math.max(voiLutValue, 0), 255);
                    image._lut[storedValue + (-offset)] = Math.round(255 - clampedValue);
                }
            } else {
                for (storedValue = minPixelValue; storedValue <= maxPixelValue; storedValue++) {
                    modalityLutValue = storedValue * image._slope + image._intercept;
                    voiLutValue = (((modalityLutValue - (center0)) / (width0) + 0.5) * 255.0);
                    clampedValue = Math.min(Math.max(voiLutValue, 0), 255);
                    image._lut[storedValue + (-offset)] = Math.round(clampedValue);
                }
            }
        }
